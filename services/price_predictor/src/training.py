import numpy as np
import pandas as pd
from tools.logging_config import logger
from tools.ohlc_data_reader import OhlcDataReader
from tools.settings import SupportedCoins


def train(
    feature_view_name: str,
    feature_view_version: int,
    product_id: str,
    last_n_days_to_fetch_from_store: int,
    last_n_days_to_test_model: int,
    discretization_thresholds: list[float],
    prediction_window_tick: int,
):
    """Train a model to generate price predictions.

    The model follows the following steps:
    1. Fetch OHLC data from the feature store.
    2. Create the target variable.
    3. Train the model.

    Args:
    ----
    feature_view_name: The name of the feature view.
    feature_view_version: The version of the feature view.
    product_id: The product_id to read data for.
    last_n_days_to_fetch_from_store: The number of days to read data from.
    last_n_days_to_test_model: The number of days to test the model on.
    discretization_thresholds: The discretization thresholds.
    prediction_window_tick: The prediction window tick into the future.

    """
    ohlc_data_reader = OhlcDataReader(
        feature_view_name=feature_view_name,
        feature_view_version=feature_view_version,
    )
    ohlc_data = ohlc_data_reader.read_from_offline_store(
        product_id=product_id,
        last_n_days=last_n_days_to_fetch_from_store,
    )

    logger.info("Splitting data into train and test sets.")
    train_df, test_df = temporal_train_test_split(
        ohlc_data, last_n_days_to_test_model=last_n_days_to_test_model
    )
    logger.info("Creating target variable for trainset.")
    train_df = create_target_variable(
        train_df, discretization_thresholds, prediction_window_tick
    )
    logger.info("Creating target variable for testset.")
    test_df = create_target_variable(
        test_df, discretization_thresholds, prediction_window_tick
    )

    logger.info("Distribution of the target in the train data")
    logger.info(train_df["target"].value_counts())
    logger.info("Distribution of the target in the test data")
    logger.info(test_df["target"].value_counts())


def temporal_train_test_split(
    ohlc_data: pd.DataFrame, last_n_days_to_test_model: int
) -> tuple[pd.DataFrame, pd.DataFrame]:
    """Split the data into train and test splits.

    Split is a temporal split. Last_n_days_to_test_model define
    the number of days for testing the model.

    Args:
    ----
    ohlc_data: The OHLC data to split.
    last_n_days_to_test_model: The number of days to test the model on.

    """
    max_data_in_dataset = ohlc_data["end_time"].max()
    cutoff_date = max_data_in_dataset - pd.Timedelta(
        days=last_n_days_to_test_model
    )
    train_df = ohlc_data[ohlc_data["end_time"] < cutoff_date]
    test_df = ohlc_data[ohlc_data["end_time"] >= cutoff_date]
    return train_df, test_df


def create_target_variable(
    ohlc_data: pd.DataFrame,
    discretization_thresholds: list[float],
    prediction_window_tick: int,
) -> pd.DataFrame:
    """Create the target variable based on future close percentage changes.

    The target variable is generated by comparing the percentage change in the
    close price of the current tick with the close price of a future tick,
    defined by `prediction_window_tick`.

    Targets are defined as follows:
    0: The %change is negative and falls below the min discretization threshold.
    1: The %change is negligible (within the discretization thresh around zero).
    2: The %change is positive and exceeds the maximum discretization threshold.

    Args:
    ----
    ohlc_data: The OHLC data to create the target variable for.
    discretization_thresholds: The discretization thresholds.
    prediction_window_tick: The number of ticks in the future to compare

    """

    def discretize_target(x: float) -> int:
        if x <= discretization_thresholds[0]:
            return 0
        elif x < discretization_thresholds[1]:
            return 1
        elif x >= discretization_thresholds[1]:
            return 2
        else:
            return np.nan

    ohlc_data["pct_change"] = (
        ohlc_data["close"].pct_change(periods=prediction_window_tick) * 100
    )
    ohlc_data["target"] = (
        ohlc_data["pct_change"]
        .apply(discretize_target)
        .shift(-prediction_window_tick)
    )
    return ohlc_data


if __name__ == "__main__":
    train(
        feature_view_name="ohlc_feature_view",
        feature_view_version=1,
        product_id=SupportedCoins.BTC_USD.value,
        last_n_days_to_fetch_from_store=30,
        last_n_days_to_test_model=2,
        discretization_thresholds=[-0.1, 0.1],
        prediction_window_tick=1,
    )
